---
import SecondaryCTA from "@components/ui/buttons/SecondaryCTA.astro";
import Icon from "@components/ui/icons/Icon.astro";

const pricingPlans = [
  {
    name: "Examen médico",
    description: "Carro particular B1",
    price: "$ 227.000 COP",
    cents: "",
    billingFrequency: "/pago único",
    features: [
      "Duración: 40 minutos aproximadamente.",
      "Debes traer tu C.C. original",
      "Estar inscrito en el RUNT"
    ],
  },
  {
    name: "Examen médico",
    description: "Carro particular y público C1",
    price: "$ 227.000 COP",
    cents: "",
    billingFrequency: "/pago único",
    features: [
      "Duración: 40 minutos aproximadamente.",
      "Debes traer tu C.C. original",
      "Estar inscrito en el RUNT"
    ],
  },
  {
    name: "Examen médico",
    description: "Moto A2",
    price: "$ 227.000 COP",
    cents: "",
    billingFrequency: "/pago único",
    features: [
      "Duración: 40 minutos aproximadamente.",
      "Debes traer tu C.C. original",
      "Estar inscrito en el RUNT"
    ],
  },
  {
    name: "Examen médico",
    description: "Carro particular B1/público C1 y moto A2",
    price: "$ 310.000 COP",
    cents: "",
    billingFrequency: "/pago único",
    features: [
      "Duración: 40 minutos aproximadamente.",
      "Debes traer tu C.C. original",
      "Estar inscrito en el RUNT"
    ],
  },
];
---

<section
  class="relative flex min-h-[65vh] flex-col items-center justify-center"
>
  <div
    class="absolute left-0 right-0 flex -translate-y-1/2 items-center justify-between px-4 sm:px-10"
  >
    <button
      id="prevBtn"
      class="z-50 flex h-12 w-12 items-center justify-center rounded-full p-3 text-white shadow-lg transition hover:bg-green-500 sm:h-14 sm:w-14 sm:p-4"
    >
      <svg
        class="dark:text-white h-6 w-6 text-gray-800"
        aria-hidden="true"
        xmlns="http://www.w3.org/2000/svg"
        width="24"
        height="24"
        fill="none"
        viewBox="0 0 24 24"
      >
        <path
          stroke="currentColor"
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d="M5 12h14M5 12l4-4m-4 4 4 4"></path>
      </svg>
    </button>
    <button
      id="nextBtn"
      class="z-50 flex h-12 w-12 items-center justify-center rounded-full p-3 text-white shadow-lg transition hover:bg-green-500 sm:h-14 sm:w-14 sm:p-4"
    >
      <svg
        class="h-6 w-6 text-gray-800"
        aria-hidden="true"
        xmlns="http://www.w3.org/2000/svg"
        width="24"
        height="24"
        fill="none"
        viewBox="0 0 24 24"
      >
        <path
          stroke="currentColor"
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d="M19 12H5m14 0-4 4m4-4-4-4"></path>
      </svg>
    </button>
  </div>
  <div class="relative w-full lg:w-3/4">
    <div id="carousel" class="relative flex items-center justify-center">
      {
        pricingPlans.map((plan, index) => (
          <div
            class="absolute w-full scale-90 transform rounded-2xl bg-gradient-to-tr from-[#6EE7B7] to-[#059669] p-8 text-white opacity-0 shadow-xl transition-all duration-500 ease-in-out"
            data-index={index}
          >
            <div class="mb-4 text-center">
              <p class="text-3xl font-bold">{plan.name}</p>
              <p class="text-2xl">{plan.description}</p>
            </div>
            <div class="mb-4 flex items-baseline justify-center gap-2">
              <span class="text-3xl font-bold">{plan.price}</span>
              <span class="text-xl font-bold">{plan.cents}</span>
              <span class="text-lg text-green-200">
                {plan.billingFrequency}
              </span>
            </div>
            <ul class="mb-6 space-y-2 text-center">
              {plan.features.map((feature, i) => (
                <li class="flex items-center justify-center gap-2 text-lg">
                  <Icon name="checkCircle" class="h-6 w-6 text-green-400" />
                  <span>{feature}</span>
                </li>
              ))}
            </ul>
          </div>
        ))
      }
    </div>
  </div>
</section>

<script is:inline>
  document.addEventListener("DOMContentLoaded", function () {
    let index = 0;
    const slides = document.querySelectorAll("#carousel > div");
    const totalSlides = slides.length;
    let startX = 0;

    function updateSlide() {
      slides.forEach((slide, i) => {
        if (i === index) {
          slide.style.opacity = "1";
          slide.style.transform = "scale(1)";
          slide.style.zIndex = "10";
        } else {
          slide.style.opacity = "0";
          slide.style.transform = "scale(0.9)";
          slide.style.zIndex = "5";
        }
      });
    }

    document.getElementById("nextBtn").addEventListener("click", () => {
      index = (index + 1) % totalSlides;
      updateSlide();
    });

    document.getElementById("prevBtn").addEventListener("click", () => {
      index = (index - 1 + totalSlides) % totalSlides;
      updateSlide();
    });

    // Soporte táctil (swipe)
    const carousel = document.getElementById("carousel");

    carousel.addEventListener("touchstart", (e) => {
      startX = e.touches[0].clientX;
    });

    carousel.addEventListener("touchend", (e) => {
      let endX = e.changedTouches[0].clientX;
      let diffX = startX - endX;

      if (diffX > 50) {
        index = (index + 1) % totalSlides; // Swipe izquierda (siguiente)
      } else if (diffX < -50) {
        index = (index - 1 + totalSlides) % totalSlides; // Swipe derecha (anterior)
      }
      updateSlide();
    });

    updateSlide();
  });
</script>
